#! /bin/sh
#

### BEGIN INIT INFO
# Provides:          apt-cacher
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: apt-cacher package caching proxy daemon 
# Description:       The apt-cacher service is used to cache packages for a system or LAN
### END INIT INFO
# Original apt-cacher init-script modernized to run in both Debian-like
#   AND RHEL-like AND OpenSUSE OS environments
# -- Modernization Copyright (C) 2014-2017 by Jim Klimov <EvgenyKlimov@Eaton.com>
#   NOTE: Remote-FS dependency added to store the actual cache on a NAS

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DESC="Apt-Cacher"
NAME=apt-cacher
DAEMON=/usr/sbin/$NAME
RUNDIR=/var/run/$NAME
PIDFILE=$RUNDIR/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
LOGDIR=/var/log/apt-cacher

# Gracefully exit if the package has been removed.
test -x $DAEMON || exit 0

# Read config file if it is present.
if [ -r /etc/default/$NAME ]
then
	. /etc/default/$NAME
fi

_START_FLAVOUR=""
if [ -r /lib/lsb/init-functions ]
then
	. /lib/lsb/init-functions
	_START_FLAVOUR="debian"
fi

if [ -r /etc/init.d/functions ]
then
	. /etc/init.d/functions
	_START_FLAVOUR="centos"
fi

if grep -i 'opensuse 13' /etc/os-release 2>/dev/null 1>/dev/null ; then
    _START_FLAVOUR=opensuse
fi

#
#	Function that starts the daemon/service.
#
d_start() {

    if test "$AUTOSTART" = 1 ; then
	case "$_START_FLAVOUR" in
	centos)
		echo -n $"Starting $NAME daemon: "
		daemon $DAEMON -R 3 -d -p $PIDFILE $EXTRAOPT
		RETVAL=$?
		[ $RETVAL -eq 0 ] && touch /var/lock/subsys/$NAME
		echo
		return $RETVAL
		;;
	debian)
		start-stop-daemon --start --quiet  \
		    --exec $DAEMON -- -R 3 -d -p $PIDFILE $EXTRAOPT && \
		    echo "$NAME."
		return $?
		;;
	opensuse)
		echo -n $"Starting $NAME daemon: "
		cd "$LOGDIR" && \
		    nohup $DAEMON -R 3 -d -p $PIDFILE $EXTRAOPT
		RETVAL=$?
		echo
		return $RETVAL
		;;
	esac
    else
	echo "Not started (AUTOSTART not enabled in /etc/default/$NAME)"

	# apt-cacher needs $RUNDIR, but is not able to create it in inetd or CGI mode
	if test ! -d "$RUNDIR"; then
	    mkdir -m 755 "$RUNDIR"
	    CONFIG_FILES="/etc/$NAME/$NAME.conf $(run-parts --list /etc/$NAME/conf.d)"
	    RUN_AS_USER=$(sed -n 's/^\s*user\s*=//p' $CONFIG_FILES  | tail -1 | tr -d '[:blank:]')
	    RUN_AS_GROUP=$(sed -n 's/^\s*group\s*=//p' $CONFIG_FILES | tail -1 | tr -d '[:blank:]')
	    [ "$RUN_AS_USER" ] && chown $RUN_AS_USER "$RUNDIR"
	    [ "$RUN_AS_GROUP" ] && chgrp $RUN_AS_GROUP "$RUNDIR"
	fi

    fi

    return 0
}

#
#	Function that stops the daemon/service.
#
d_stop() {
	case "$_START_FLAVOUR" in
	centos|opensuse)
		echo -n $"Stopping $NAME daemon: "
		killproc $DAEMON
		RETVAL=$?
		;;
	debian)
		start-stop-daemon --stop --quiet --retry=TERM/10/KILL/5 --pidfile $PIDFILE \
		    --name $NAME
		RETVAL=$?
		;;
	esac

	# Also stop any running libcurl backend
	/usr/share/apt-cacher/libcurl.pl EXIT

	case "$_START_FLAVOUR" in
	centos)
		[ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/$NAME
		echo
		;;
	esac
    return $RETVAL
}

d_status() {
	case "$_START_FLAVOUR" in
	centos)
		status -p "$PIDFILE" "$DAEMON" && return 0 || return $?
		;;
	debian)
		status_of_proc "$DAEMON" "$NAME" && return 0 || return $?
		;;
	opensuse)
		test -f $PIDFILE && pid=`cat $PIDFILE` && test -n "$pid" || return $?
		test -d "/proc/$pid" || return $?
		grep "$DAEMON" "/proc/$pid/cmdline" >/dev/null 2>&1
		return $?
		;;
	esac

	### Unknown OS, unknown state
	return 0
}

case "$1" in
  start)
	echo -n "Starting $DESC: "
	d_start
	;;
  stop)
	echo -n "Stopping $DESC: "
	d_stop
	echo "$NAME."
	;;
  restart)
	echo -n "Restarting $DESC: "
	d_stop
	sleep 1
	d_start
	;;
  force-reload|reload)
	echo -n "Reloading configuration of $DESC: "
	test -f "$PIDFILE" && pid="`cat "$PIDFILE"`"
	if test -z "$pid" ; then
	    echo "$NAME not running."
	else
	    kill -HUP $pid && echo "done!."
	fi
	;;
  status) d_status ;;
  kick) ### An action to (re)start from crontab for example. TODO: block-file?
	    d_status >/dev/null 2>&1 || {
	    echo -n "(Re)starting $DESC: "
	    d_stop
	    sleep 1
	    d_start
	} ;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload|status|kick}" >&2
	exit 1
	;;
esac

exit 0
